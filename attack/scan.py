#!/usr/bin/env python
# Name: scan.py
# Author: Mark Spicer
# Purpose: To scan a provided subnet for responsive machines

# Import the necessary modules.
import ipaddress
import os
import nmap
import threading

# Create a scan class that creates a thread for each host
class scan (threading.Thread):
    # Create the object.
	def __init__(self, threadID, name, ip):
		threading.Thread.__init__(self)
		self.threadID = threadID
		self.name = name
		self.ip = ip
		self.info = 0

    # Run the port scanner on the IP address.
	def run(self):
		nm = nmap.PortScanner()
		nm.scan(hosts=self.ip, arguments='-sP')
		if nm[self.ip].state() == 'up':
			nm.scan(hosts=self.ip, arguments='-T5')
		
		self.info = nm

	# Return the info for the IP address.
	def results(self):
		return self.info

# Get ip address from user and validate.
while True:
	iprange = raw_input("Enter IP range in cidr notation: ")
	try:
		iprange = ipaddress.ip_network(unicode(iprange))
		break
	except Exception,e:
		print "\t%s" %e

# Define variables for the creation of threads.
count = 0
threads = []

# Iterate through each of the hosts in the range.
for ip in iprange.hosts():
	try:
		ip = str(ip)
		t = scan(count, "Thread-" + str(count), ip)
		threads.append(t)
		t.start()
		count += 1
	except Exception,e:
		print "\t%s" %e

# Print out data generated by the nmap scans.
for t in threads:
	# Wait for the thread to finish before accessing data.
	t.join()
	nm = t.results()

	# Iterate through each host and print out info.
	for host in nm.all_hosts():
		if nm[host].state() == 'up':
			print('----------------------------------------------------')
			print('Host : %s (%s)' % (host, nm[host].hostname()))
			print('State : %s' % nm[host].state())

			for proto in nm[host].all_protocols():
				print('----------')
				print('Protocol : %s' % proto)

				lport = nm[host][proto].keys()
				lport.sort()
				for port in lport:
					print('port : %s\tstate : %s' % 
						(port, nm[host][proto][port]['state']))












